# map_gen.ini                                                      2017-Apr-09
# Configuration file for map_gen V 1.1.0
##############################################################################
#
# Everything in a line after '#' is a comment.
# The file is divided into sections.
# Each section starts with a line containing
# nothing else than the section name in square
# brackets, [<section_name>].
#
##############################################################################
#
# How to use map_gen:
#
#   Step 1: Select the type of map (aka scenario) you want to create.
# In the section [map_type] that follows this step-by-step instruction,
# unmask exactly one map type.  This determines the map type that will
# be created when you run "map_gen".
#
#
#   Step 2: Each map type has its own section where it is described.
# Go to that section and edit the parameters according to your wishes.
# Example: If you chose the 'Mountains' map type in the [map_type]
# section, go to the [Mountains] section and edit it.  You don't need
# to edit any other section to generate a 'Mountains' map.
# You can choose to leave the [Mountains] parameters at their
# default values, of course.
#
#
#   Step 3: Be sure to have "map_gen.ini" in the same directory
# as "map_gen.exe".  Run "map_gen.exe" from the command line (DOS box).
# Map generation may take some minutes or just a few seconds, depending
# on the map type, map size and your hardware.
#
# IMPORTANT NOTE: If you set certain map parameters to extreme values,
# map generation might fail.  Example: You cannot place 15 player start
# positions with a mutual distance of 20 tiles on a size 35% map ---
# they simply don't fit there.  Map generation will fail in that case.
#
# If you see the message "map <your_map_name> successfully generated",
# map generation succeeded.  If map_gen terminates and you don't see that
# message, map generation failed.  Change some parameters and try again.
# Hints for parametrization are given in the sections for each map type.
# If map generation failed, you can look into "map_gen.log" to determine
# the cause of the failure.  You might want to consult "FAQ.txt", too.
#
# If map generation was successful and you want to play the map as a human
# player, do *not* look into "map_gen.log" because it will give you some
# clues about the generated map and hence spoil the thrill that an
# unknown map would give you.
#
#   Step 4: Copy the generated map to the "Maps" subdirectory of C-Evo.
# Start C-Evo and select your map.
#
##############################################################################

#-----------------------------------------------------------------------------
[map_type]
#-----------------------------------------------------------------------------
# Please mask all entries with a '#' except the one you want to create.
# Map types are described in their respective sections below.
# Sections start with a line containing the section name (= map type)
# in square brackets [].

map_type = Mountains
#map_type = Navigation_required
#map_type = Micronesia
#map_type = Hard_fight
#map_type = Arctic
#map_type = The_big_river
#map_type = Great_Plains
#map_type = Volcano_Islands
#map_type = Desert



#-----------------------------------------------------------------------------
[Mountains]
#-----------------------------------------------------------------------------

# This scenario is composed mostly of mountain tiles.  There is also a small
# number of lakes.  At the lakesides there are some fertile tiles in this
# otherwise rugged scenario.
#
# Rivers coming down from the mountains are filling the lakes.
# Beside the rivers are forest, grassland/plains and some hill tiles.
#
# Computer starting positions will be placed most likely near lakesides and
# rivers.  The human player's starting position will be in a faraway valley
# with quite limited food resources, so try to get out there soon.
#
# Deep in the mountains there are some glaciers (clusters of arctic),
# but never with ivory (for optical reasons, no walrus in the mountains).
#
# Some mountains are replaced by hills (coming in clusters)
# a) making the scenario look less boring
# b) allow more city places after transforming
#
# There are six special resources, two of each type (standard).
# There are six dead lands (standard, too).
# The special resources are located near faraway valleys with few food
# resources.  These "valleys" consist only of two hill tiles which must be
# transformed to plains/grassland before a city can be built there.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "mountains.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 100  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 4  # number of computer players: minimum 1, maximum 14

starting_pos_dist = 550 # guaranteed minimum distance between starting
                        # positions
                        # (old movement point definition: 100/150 MP per tile)


 # generate a small number of lakes
lake_percentage = 7  # amount of water tiles as percentage of
                     # total tiles on map
lake_dist = 1200  # minimum distance between lakes
                  # (old movement point definition: 100/150 MP per tile)
 # Size range for each lake in tiles
 # The actual size is a random value between these limits
min_lake_size = 70
max_lake_size = 300  # make this value approx. 3 * map_size value
 # The default values for lake generation will produce typically 2..3 lakes,
 # which results in a well-balanced map.  Significant changes could easily
 # lead to a map with too few places for starting positions, which would cause
 # a failed map generation.  You are of course free to experiment.


 # generate a small number of glaciers
glacier_percentage = 2  # amount of arctic tiles as percentage of
                        # total tiles on map
max_no_of_glaciers = 10 # make this value approx. map_size / 10


# See "examples\mountains.ini" for more parametrization proposals

# Hints:
# - Typical fast early scout units (horsemen) are of no use in this scenario
#   since all movement points are used to just get to the next mountain tile
#   (there are no roads yet).
# - Defense is much easier than attack due to the 200% defense bonus of
#   mountains.



#-----------------------------------------------------------------------------
[Navigation_required]
#-----------------------------------------------------------------------------

# This scenario isolates players until they discover navigation
# (or air transport, or until one nation builds the MIR space station).
# This scenario was designed to combine 'late contact' with 'limited
# land mass' and 'oversea attack'.
# It is best suited for players who like to develop their cities
# in an environment with quite limited resources undisturbed by
# enemy attacks in early game.
# The map consists of some medium sized islands with
# a guaranteed minimum distance between them.
# Each player starts on its own island.
#
# There are three special resources, one of each type.
# There are no dead lands.
# Each special resource is placed into the city radius of the
# human player's and the first two computer player's starting
# positions.  A player must occupy these three islands to win.
# In other words: As long as you successfully defend your island,
# your opponents cannot win.
#
# The islands have a smooth coastline (not rugged) to allow
# an easy defense against attacks from sea.

# Hints:
# Plan your city positions carefully since land mass is rare.
# Try to exploit as many coast tiles as possible.
# Map_gen supports this strategy by placing all
# starting positions in a way that does not spoil (in most cases) the
# overall optimum city placement for the whole island.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "nav_req.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 2  # number of computer players: minimum 2, maximum 14

 # Size range for the human player's island
 # The actual size is a random value between these limits
human_island_min_size = 35  # size in land tiles
human_island_max_size = 50  # size in land tiles

 # Number of islands suitable for computer players
 # The actual number is a random value between these limits
min_no_of_comp_islands = 2  # must be greater than or equal to
                            # "comp_opponents"
max_no_of_comp_islands = 3  # must be greater than or equal to
                            # "min_no_of_comp_islands"

 # Size range for computer player islands
 # Recommendation: Don't make it smaller than the default values.
 #                 AIs perform very badly on small islands.
comp_island_min_size = 250  # size in land tiles
comp_island_max_size = 350  # size in land tiles

big_island_dist = 1500  # Minimum distance between player islands
                        # (old movement point definition: 100/150 MP per tile)
 # Don't make it less than 800, otherwise navigation might not be required.
 # Set it to 1500 or higher if you have SETI in your game
 # and don't want to be attacked by planes.


# As an option some additional 'small' islands can be generated.
# Reasons:
# - They make the map look more interesting
# - These islands can be used for additional military bases or cities.
# - If they are nearby an enemy island they can serve as a base for
#   attacks (e. g. to repair damaged ships without returning them to
#   their home bases).
# Since on most small islands there is only room for one or two cities,
# these places are quite vulnerable.  Defend them well.
# If you don't want small islands at all, set the next two parameters to
# zero.

 # Number of small islands
 # The actual number is a random number between these limits
min_no_of_small_islands = 3
max_no_of_small_islands = 5

 # Size range for small islands
 # The actual size is a random value between these limits
small_island_min_size = 2  # size in land tiles
 # do not set below 2 because one-tile-islands will be removed!
small_island_max_size = 11  # size in land tiles
small_island_dist = 700 # Minimum distance between small islands and
                        # player islands.
                        # (old movement point definition: 100/150 MP per tile)



#-----------------------------------------------------------------------------
[Micronesia]
#-----------------------------------------------------------------------------

# Like "Navigation_required", this scenario is a waterworld.
# There are many many small islands, scattered all over the map.
# There are no big islands, so the total landmass is very small.
# Unlike "Navigation_required", it is  *not*  guaranteed that navigation
# is required to contact other nations, but a minimum distance between
# starting positions is guaranteed however.
#
# There are up to 12 special resources in the game
# (standard distribution: 2 of each + 6 dead lands).  But if there are
# not enough suitable places to drop special resources (very likely
# since there are only a few places suitable to settle down) then the
# algorithm stops after dropping the first 3 special resources. It is
# one of each type so the map is playable.
# Special resources summary:
# Maximum: 2 uranium, 2 mercury, 2 cobalt, 6 dead lands
# Minimum: 1 uranium, 1 mercury, 1 cobalt
#
# Todays AIs perform very badly on small islands,
# so play (---)(human) against (-)(AIs)  ='insane level'.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "micronesia.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 12  # number of computer players: minimum 1, maximum 14

starting_pos_dist = 550 # guaranteed minimum distance between starting
                        # positions
                        # (old movement point definition: 100/150 MP per tile)

land_percentage = 5  # total landmass as percentage of total tiles on map

 # Size range for islands
 # The actual size is a random value between these limits
small_island_min_size = 2  # do not set below 2 because one-tile-islands
                           # will be removed!
small_island_max_size = 50

small_island_dist = 200  # minimum distance between the islands
                         # (old movement point definition: 100/150 MP per tile)




#-----------------------------------------------------------------------------
[Hard_fight]
#-----------------------------------------------------------------------------

# I recommend this scenario for experienced players only, because
# I think it will not be much fun for beginners.
# It is derived from "Navigation_required".
# It takes the 'isolation'/'late contact' setup to an extreme:
# There are three islands with three special resources.
# One small island for the human player and two somewhat bigger
# islands for computer players.
# There is a ring of water around each island (no surprise so far ;-)
# but the rest of the map is filled with one big continent.
# In other words: The map is one big continent with three lakes.
# In the middle of each lake is an island.
# Now here is what is special for this scenario:
# The outer lakeside (continental side) is completely made of
# 'mountain' tiles, thus preventing any naval attack on the three islands.
# Why? No harbor cities possible!
# If this map description was too confusing,
# simply generate a "Hard fight" map and load it into C-Evo's
# built-in map editor: At a glance you'll see what this scenario looks like.
# 
# The whole map looks quite synthetic and unnatural, but that is
# not the important point here.  The important point is the challenge.
# You have to develop your nation in an isolated situation
# with very limited resources.  You will not be able to keep track with
# the dominant nation, so you have to fight with supreme human tactics
# and creativity to win this game.
# Since you cannot be attacked by the AIs it is
# up to you 'to go out and attack'.
# Take your time and be well prepared.
# To win, first you have to fight a way through the continent to the other
# two lakes and then to conquer the other two islands (without ships!).
# That's not an easy job when you're far behind in both military strength
# and technology.  That's why this scenario is called "Hard fight".
#
# Here is a summary of what makes this scenario so hard to win:
# - You are isolated on a small island with few resources,
#   though safely protected against attacks.
# - You cannot exchange knowledge with other nations until you have
#   developed navigation (or combined arms)
# - When you finally *have* developed transport ships and made contact,
#   you will be far behind in technology, i. e. you have nothing to
#   offer to other nations during negotiations.
# - The dominant computer player will soon rule the whole continent,
#   thus getting a lot of cities quickly.
# - The two island players can evolve without being attacked.
#   You have to conquer these probably well-developed island nations
#   with bombers (no carriers!) and transport planes.
# - If that is still not hard enough for you,
#   play level (---) (human) against level (-) (AIs)
# - Place 12 computer players on the continent (i. e. 14 computer opponents:
#   12 on the continent and 2 on the other two islands)
# - Map size 230% provides space for really really many enemy cities
# Don't forget to select end year 3000 AD or probably nobody will win the game.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "hard_fight.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 14  # number of computer players: minimum 3, maximum 14

 # Size range for human player island
 # The actual size is a random number between these limits
human_island_min_size = 30  # size in land tiles
human_island_max_size = 40  # size in land tiles

 # Size range for computer player islands
 # Recommendation: Don't make it smaller than the default values.
 # AIs perform very badly on small islands.
comp_island_min_size = 300  # size in land tiles
comp_island_max_size = 400  # size in land tiles

big_island_dist = 3600  # mutual distance of the three islands,
                        # minimum value is [2 * water_width + 200]
                        # or the lakes will merge together
water_width = 1500  # width of water ring between islands and continent
                    # (old movement point definition: 100/150 MP per tile)

starting_pos_dist = 1300
 # mutual minimum distance for continent players start positions
 # (old movement point definition: 100/150 MP per tile)


# Strategical hints:
# - You don't have to build troops in the early game --- put focus
#   on technology instead
# - Try to concentrate on massive attacks against enemy cities,
#   followed by *very* strong defense measurements.
#   And pray that the dominant nation has not built the Shinkansen Express :-(
#   You don't have defense units which are strong enough?  What a pity ...



#-----------------------------------------------------------------------------
[Arctic]
#-----------------------------------------------------------------------------

# This scenario is an iceworld.
# The map is -- roughly -- divided into three horizontal stripes.
#
# The northern stripe is basically arctic with some mountains, hills and
# tundra.  There is nearly no liquid water there.
# The mid stripe is similar to the northern stripe, but there are also water
# areas.  Ice floes will be floating there.
#
# The southern stripe is warmer.  It is a mixture of ocean and land.
# It looks more like 'me settling down here', with forests, hills,
# grasslands and so on...
# All computer players have their starting positions in the southern stripe.
# There are a lot of good places to settle down there.
#
# The human player's starting position is in the mid stripe.
# I hear you asking: How can this be since there are mainly arctic, mountain
# and water tiles there?  Well, some tiles will be replaced by tundra to allow
# some cities in the northern and mid stripes, too.
# The human starting position is transformed to "Grassland".
# It is guaranteed to be a coast city with access to the open sea.
# However, city sizes in the northern and mid stripe are quite limited
# due to the arctic environment.
#
# There are three special resources, one of each type.  There are no dead
# lands.  Two of the special resources are placed in the southern stripe,
# the other in the northern stripe.  To win the game a player must control both
# the southern and the northern stripe, i. e. the whole map.
#
# Recommendations:
# - Map size=230 to get the feeling of an endless iceworld.
# - Human nation = Vikings.  Make raids on rich lands, pillage and have fun :-)
# - Human player on same level as computer players.  This scenario is already
#   hard enough for the human player.

# Variation: The parameter "no_southern_land=1" makes this scenario a total
# iceworld.  No land tiles are generated in the southern stripe.  All special
# resources are placed in the northern stripe.
# Computer players start on similar locations as the human player.
# Recommendations: Human player at harder level than computer players; they
# are not designed for such an iceworld.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "arctic.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230   # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)
comp_opponents = 3  # number of computer players: minimum 2, maximum 14

northern_percentage = 20  # tiles in northern stripe ...
southern_percentage = 30  # tiles in southern stripe ...
                          # ... as percentage of total tiles on map
MHT_percentage = 2  # number of mountains, hills and tundra (MHT) tiles in
                    # northern and mid stripe
                    # as percentage of total tiles in northern and mid stripe
no_southern_land = 0  # see explanation above

 # southern land generation (effective only if no_southern_land = 0)
land_percentage = 20  # land percentage in southern stripe
                      # (the rest of the southern stripe is water)

starting_pos_dist = 1000
 # minimum distance between starting positions
 # (old movement point definition: 100/150 MP per tile)

northern_harbors = 8
 # Number of suitable 'settle down' positions with access to the ocean
 # (= northern_harbors) where an arctic tile is replaced by a tundra tile.
 # I recommend 8 for 230% maps, fewer for smaller maps.
 #
 # The "starting_pos_dist" parameter also applies here.
 # If "no_southern_land" = 1, these places are used as starting positions
 # for the computer opponents.



#-----------------------------------------------------------------------------
[The_big_river]
#-----------------------------------------------------------------------------

# This scenario consists of a big East-West-River which separates the
# map into two landmasses north and south of the river.
#
# Distribution of special resources is standard (two of each plus
# six dead lands).
#
# You need to control both riversides to build the spaceship since
# there is a lack of one special resource on each side.
#
# You can freely choose how many computer players start on each side,
# and on which side the human player starts.


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "big_river.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 70  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

water_width = 500  # Width of river
 # Minimum: 200
 # Maximum depends on map_size (a warning will be given if value is too high).
 # Set it to 650 or higher if navigation shall be required to cross the river.

 # number of computer players on ...
comp_opponents_area1 = 3  # ... north side: minimum 0, maximum 15
comp_opponents_area2 = 3  # ... south side: minimum 0, maximum 15
human_start_pos = 2   # 1 means human on north side
                      # 2 means human on south side
                      # 3 means random side
                      # 0 means no generation of a special starting
                      #   position for the human player
# What is the difference between 'random' (3) and 'no generation' (0)?
# Well, 'no generation' does not place a human player marker on the
# map, so that C-Evo will choose one of the regular starting positions
# for the human player.
# On the other hand, 'random'  *does*  place a special marker for the human
# player.  Its position is picked *after* placing all the regular markers,
# i. e. of all starting positions, the human player gets the worst one
# (starting positions are picked in the following order: Best one first,
# then second best and so on).
# => By choosing 'random', you can introduce an additional handicap for the
#    human player.

# Restriction: The sum of all starting positions must not exceed 15.
#              Choosing 0 for the human_start_pos counts as zero positions,
#              allowing up to 15 for the sum of area1 and area2.
#              Choosing 1, 2 or 3 for the human_start_pos counts as
#              one (1) position, allowing up to 14 for the sum of area1 and
#              area2.

starting_pos_dist = 1200
 # Minimum distance between all starting positions
 # (old movement point definition: 100/150 MP per tile)



#-----------------------------------------------------------------------------
[Great_Plains]
#-----------------------------------------------------------------------------

# This scenario is a great prairie area surrounded by mountains.
# Most terrain is plain terrain, so fast units do not waste their
# movement points by entering heavy terrain like hills, forest, swamp etc.
# On the other hand, plain terrain does not give a defense bonus.
#
# Some lakes, grasslands and forests are added to allow better
# starting positions and tactical usage of the terrain.
#
# As an option, some 'big rivers' (ribbons of water tiles) can
# be added, which separate the map into several parts.  These rivers
# reduce the benefit from the Shinkansen Express and might delay
# contact between players.
#
# Special resources appear in their standard quantity:
# Two of each plus six dead lands.
# They are all located in the mountains north and south of
# the plain terrain.  On very small maps, there might be fewer
# special resources (minimum three, one of each kind).


#------------------------------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "great_plains.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 150  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 14  # number of computer players: minimum 1, maximum 14

starting_pos_dist = 1200
 # Minimum distance between all starting positions
 # (old movement point definition: 100/150 MP per tile)


 # Some lakes are added.
lake_percentage = 2  # amount of water (lake) tiles as percentage of
                     # total tiles on map.  You may set "lake_percentage" to
                     # zero to inhibit lake generation.
min_lake_size = 3  # minimum lake size in tiles
max_lake_size = 20  # maximum lake size in tiles
lake_dist = 200  # minimum distance between lakes
                 # (old movement point definition: 100/150 MP per tile)


 # Add some grassland near water and rivers
grassland_percentage = 1  # amount of grassland tiles as percentage of
                          # total tiles on map
 # grassland cluster size
 # The actual sizes are random values between these limits
grassland_min_size = 1  # minimum cluster size in tiles
grassland_max_size = 6  # maximum cluster size in tiles

 # Add some forest near the mountains
forest_percentage = 1  # analog to "grassland_*" parameters
forest_min_size = 2
forest_max_size = 8


 # Variation: You might want to add a few 'Big Rivers' (= water tiles)
 # flowing thru the Great Plains.
 # These 'Big Rivers' will delay the first contact between some players
 # and significantly reduce the benefit from the Shinkansen Express.
 # Set water_width to zero to inhibit Big River generation.
water_width = 350
      # Set it to 650 or higher if navigation shall be required to cross the
      # rivers.



#-----------------------------------------------------------------------------
[Volcano_Islands]
#-----------------------------------------------------------------------------

# I really like maps which have only few places for cities.  This is because
# I don't like games where I have 50 or more cities and I have to manage them
# every single turn.  It is simply no fun for me.
#
# "Volcano Islands" with standard parameters (as given below) will typically
# allow no more than 20..30 cities --- on the whole map, for *all* nations
# put together.
#
# The 'bad' news is: there are no new 'volcano' tiles  :-)
# "Volcano islands" consists of an ocean with some islands which are made
# mostly of mountain tiles.  In real world such a landscape is typically
# caused by volcanic activity (hot spots below the earth's crust), hence
# the scenario name.
#
# To allow building of cities, some mountain tiles are replaced by fertile
# tiles.  The algorithm is a takeover from the Mountains scenario.
# I developed "Volcano Island" when I tried to drive "Mountains" beyond its
# capabilities: I wanted a Mountains map with so much water that building
# a fleet would become relevant.  That worked to some point (see
# examples/mountains.ini for an example) but when "lake_percentage"
# approached 90% map generation permanently failed.  This was due to a
# systematic error in "Mountains": It is neglectable for low values of
# "lake_percentage" but becomes more and more relevant with increasing values.
# "Mountains" simply was not made for what I wanted now, so I developed
# "Volcano Islands".


#------  Parameters  ----------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "volcano.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 4  # number of computer players: minimum 1, maximum 14

starting_pos_dist = 550 # guaranteed minimum distance between starting
                        # positions
                        # (old movement point definition: 100/150 MP per tile)

startpos_min_rating = 8
   # This is a previously undocumented parameter which applies to all map
   # types, not only to "Volcano Islands".  It sets the level for what is
   # considered to be an acceptable starting position.


island_percentage = 4  # total landmass as percentage of total tiles on map

 # Size range for islands
 # The actual size is a random value between these limits
island_min_size = 10  # minimum size in tiles
island_max_size = 60  # maximum size in tiles

island_dist = 900   # minimum distance between the islands
                    # (old movement point definition: 100/150 MP per tile)



#-----------------------------------------------------------------------------
[Desert]
#-----------------------------------------------------------------------------

# From the forum I learned that some of you are interested in playing desert
# maps.  Same here; so I made this scenario.  Alas, it is not much more than
# a stub yet.  Currently, there are nearly no parameters.  Anyway, the maps
# are playable, so I decided to release it.
#
# The basic map shape is made of desert and water, ratio 50:50.  A parameter
# to change that ratio is still missing.  A few mountain ridges are placed
# somewhere in the desert.  Since mountains attract rain, there is a good
# chance that rivers spring off near the mountains. Now we have candidates
# for changing desert tiles into fertile tiles: shore tiles and tiles with
# rivers, because both have access to water.  Some of these tiles are
# changed to grasslands and prairie to allow starting positions.
#
# Special resources are placed deep in the desert.  It is *your* task to
# transform some desert tiles to build a city there.


# Hint: Play the 'insane' level, because AIs perform surprisingly bad.
# While human players will start transforming the desert as soon as they
# discover Explosives, the AIs don't seem to have that on their agenda.
# AIs are competitive in early game but not later.  The games I played got
# quite boring in the late phase.


#------  Parameters  ----------------------------------------
# All parameters are integer values or strings
# No expressions, no floating point values

mapfile = "desert.cevo map"  # the name of the map file to be generated
 # CAUTION: An existing map with the same name as the one being generated
 # will be overwritten without notice.

map_size = 230  # Map_size may be 35, 50, 70, 100, 150 or 230 (percent)

comp_opponents = 14  # number of computer players: minimum 1, maximum 14

starting_pos_dist = 550 # guaranteed minimum distance between starting
                        # positions
                        # (old movement point definition: 100/150 MP per tile)

startpos_min_rating = 8
   # This is a previously undocumented parameter which applies to all map
   # types, not only to "Desert".  It sets the level for what is
   # considered to be an acceptable starting position.


   # Add some grassland clusters near the shore
grassland_percentage = 1   # amount of grassland tiles as percentage of
                           # total tiles on the map
grassland_min_size = 1  # minimum cluster size in tiles
grassland_max_size = 6  # maximum cluster size in tiles

   # Add some prairie clusters near the shore and rivers
prairie_percentage = 1   # amount of prairie tiles as percentage of
                         # total tiles on the map
prairie_min_size = 1  # minimum cluster size in tiles
prairie_max_size = 6  # maximum cluster size in tiles

# No more parameters yet, sorry!


#------------  end of "map_gen.ini"  -----------------------------------------
